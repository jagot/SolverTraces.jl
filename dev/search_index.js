var documenterSearchIndex = {"docs":
[{"location":"columns/#Solver-Trace-Columns-1","page":"Solver Trace Columns","title":"Solver Trace Columns","text":"","category":"section"},{"location":"columns/#","page":"Solver Trace Columns","title":"Solver Trace Columns","text":"TraceColumn","category":"page"},{"location":"columns/#SolverTraces.TraceColumn","page":"Solver Trace Columns","title":"SolverTraces.TraceColumn","text":"TraceColumn\n\nBase type for all columns that can appear in a SolverTrace. Each subtype is expected to have a property named fmt containing a formatting string, and to be callable with the current step number as argument, returning the necessary values to render the formatting string, alternatively overload Formatting.format(c::C, i::Integer) where {C<:TraceColumn}.\n\n\n\n\n\n","category":"type"},{"location":"columns/#CurrentStep-1","page":"Solver Trace Columns","title":"CurrentStep","text":"","category":"section"},{"location":"columns/#","page":"Solver Trace Columns","title":"Solver Trace Columns","text":"CurrentStep\nCurrentStep(num_steps::Integer;\n            lc::LinearColorant=LinearColorant(1, num_steps, red_green_scale()),\n            header::String=repeat(\" \", 2length(digits(num_steps))+3))","category":"page"},{"location":"columns/#SolverTraces.CurrentStep","page":"Solver Trace Columns","title":"SolverTraces.CurrentStep","text":"CurrentStep(num_steps, fmt, lc, header)\n\nTrace column display the current step and total number of iteration, e.g. [ 4/10], with the figures colored according to progress made.\n\n\n\n\n\n","category":"type"},{"location":"columns/#SolverTraces.CurrentStep-Tuple{Integer}","page":"Solver Trace Columns","title":"SolverTraces.CurrentStep","text":"CurrentStep(num_step[; lc, header])\n\nCreate a current step trace column for num_step iterations. The default color scale goes from red to green, and the default header is blank.\n\n\n\n\n\n","category":"method"},{"location":"columns/#Performance-1","page":"Solver Trace Columns","title":"Performance","text":"","category":"section"},{"location":"columns/#","page":"Solver Trace Columns","title":"Solver Trace Columns","text":"Performance\nPerformance(load::Number, load_name::String=\"Performance\")","category":"page"},{"location":"columns/#SolverTraces.Performance","page":"Solver Trace Columns","title":"SolverTraces.Performance","text":"Performance(load, header, t₀, fmt)\n\nThis trace column can be used to indicate the performance of a calculation, i.e. how many units (grid points, particles, &c) can the algorithm handle per second. The number is shifted to the appropriate order of magnitude, changing the SI prefix to e.g. kHz, MHz, &c.\n\n\n\n\n\n","category":"type"},{"location":"columns/#SolverTraces.Performance","page":"Solver Trace Columns","title":"SolverTraces.Performance","text":"Performance(load[, load_name=\"Performance\"])\n\nConstructe a Performance trace column, for load number of units per iteration.\n\n\n\n\n\n","category":"type"},{"location":"columns/#ScalarColumn-1","page":"Solver Trace Columns","title":"ScalarColumn","text":"","category":"section"},{"location":"columns/#","page":"Solver Trace Columns","title":"Solver Trace Columns","text":"ScalarColumn\nScalarColumn(n::Function, header::String, ::Type{R}, signed=false) where {R<:Real}","category":"page"},{"location":"columns/#SolverTraces.ScalarColumn","page":"Solver Trace Columns","title":"SolverTraces.ScalarColumn","text":"ScalarColumn(fmt, header, n)\n\nTrace column for any kind of scalar, returned by the callback function n.\n\n\n\n\n\n","category":"type"},{"location":"columns/#SolverTraces.ScalarColumn-Union{Tuple{R}, Tuple{Function,String,Type{R}}, Tuple{Function,String,Type{R},Any}} where R<:Real","page":"Solver Trace Columns","title":"SolverTraces.ScalarColumn","text":"ScalarColumn(n, header, ::Type{R}[, signed=false]) where {R<:Real}\n\nConstruct a ScalarColumn for the callback function n, with a format automatically generated depending on R is an integer or not, and whether it can be signed.\n\n\n\n\n\n","category":"method"},{"location":"columns/#Tolerance-1","page":"Solver Trace Columns","title":"Tolerance","text":"","category":"section"},{"location":"columns/#","page":"Solver Trace Columns","title":"Solver Trace Columns","text":"Tolerance\nTolerance(target::T,header=\"Tolerance\";print_target::Bool=true) where T","category":"page"},{"location":"columns/#SolverTraces.Tolerance","page":"Solver Trace Columns","title":"SolverTraces.Tolerance","text":"Tolerance(target, current, fmt, tol_fmt, lc, header)\n\nColumn displaying the progress of the algorithm towards a set target. At each iteration, the current value has to be updated.\n\n\n\n\n\n","category":"type"},{"location":"columns/#SolverTraces.Tolerance-Union{Tuple{T}, Tuple{T}, Tuple{T,Any}} where T","page":"Solver Trace Columns","title":"SolverTraces.Tolerance","text":" Tolerance(target[, header; print_target])\n\nConstruct a new Tolerance column with a set target.\n\n\n\n\n\n","category":"method"},{"location":"#SolverTraces.jl-1","page":"Home","title":"SolverTraces.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [SolverTraces]","category":"page"},{"location":"#SolverTraces.LinearColorant","page":"Home","title":"SolverTraces.LinearColorant","text":"LinearColorant(a, b, colors)\n\nHelper structure to linearly interpolate between the possible values in colors, where the scalar value a corresponds to the first value and b to the last. If colors is a tuple of two triples, a continuous interpolation between the endpoints will be the result, whereas if it is a vector of Crayons, nearest neighbour interpolation will be performed instead.\n\n\n\n\n\n","category":"type"},{"location":"#SolverTraces.SI_prefix_convert-Tuple{Unitful.Quantity}","page":"Home","title":"SolverTraces.SI_prefix_convert","text":"SI_prefix_convert(q)\n\nShift the SI prefix of the quantity q such that no zeros appear before the decimal point, and at most three figures do. Note that this conversion is not necessarily numerically accurate, it is mostly intended for display purposes.\n\nExamples\n\njulia> SolverTraces.SI_prefix_convert(1.0u\"nm\")\n1.0 nm\n\njulia> SolverTraces.SI_prefix_convert(0.10u\"nm\")\n100.0 pm\n\njulia> SolverTraces.SI_prefix_convert(100.0u\"nm\")\n100.0 nm\n\njulia> SolverTraces.SI_prefix_convert(999.0u\"nm\")\n999.0 nm\n\n\n\n\n\n","category":"method"},{"location":"#SolverTraces.base_exp-Union{Tuple{T}, Tuple{T}} where T<:AbstractFloat","page":"Home","title":"SolverTraces.base_exp","text":"base_exp(v)\n\nConvert the float v into a tuple of base and exponent in base-10.\n\nExamples\n\njulia> SolverTraces.base_exp(-3.5e2)\n(-3.5000000000000004, 2)\n\n\n\n\n\n","category":"method"},{"location":"#SolverTraces.ilerp-Tuple{Any,Any,Any}","page":"Home","title":"SolverTraces.ilerp","text":"ilerp(a, b, t)\n\nLinear interpolation in integer steps.\n\n\n\n\n\n","category":"method"},{"location":"#SolverTraces.red_green_scale-Tuple{}","page":"Home","title":"SolverTraces.red_green_scale","text":"red_green_scale()\n\nReturn a red–green colour scale; on Windows (with only 16 colours available), this is simply red, yellow, green, on other systems, the end-points are returned instead, for use with sat_ilerp.\n\n\n\n\n\n","category":"method"},{"location":"#SolverTraces.safe_lerp-Union{Tuple{T}, Tuple{Any,Any,T}} where T","page":"Home","title":"SolverTraces.safe_lerp","text":"safe_lerp(a, b, t)\n\nSafe implementation of linear interpolation (lerp) between a and b, where t is the linear parameter. If isnan(t), a is returned, and if t is infinite, a or b is returned, depending on the sign.\n\n\n\n\n\n","category":"method"},{"location":"#SolverTraces.sat_ilerp-Tuple{Any,Any,Any}","page":"Home","title":"SolverTraces.sat_ilerp","text":"sat_ilerp(a, b, t)\n\nSaturated linear interpolation in integer steps, clamped to the range 0:255 (the available colour space).\n\n\n\n\n\n","category":"method"},{"location":"#SolverTraces.shift_prefix-Union{Tuple{A}, Tuple{D}, Tuple{N}, Tuple{FreeUnits{N,D,A},Any}} where A where D where N","page":"Home","title":"SolverTraces.shift_prefix","text":"shift_prefix(u, e)\n\nShift the SI prefix of the unit u by e orders of magnitude (which needs to be a multiple of 3).\n\n\n\n\n\n","category":"method"}]
}
